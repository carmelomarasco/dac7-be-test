#url.data-source-aeoidac2=jdbc:oracle:thin:@26.2.63.71:1521:SVU2
#url.data-source-dashboard=${DB_URL}
#url.data-source-aeoidac2=jdbc:oracle:thin:@//dm02-scan.sogei.it:1521/DM02E_VIES
#url.data-source-aeoidac2=jdbc:oracle:thin:@(DESCRIPTION=    (ADDRESS=      (PROTOCOL=TCP)      (HOST=26.2.63.71)      (PORT=1521)    )    (CONNECT_DATA=      (SERVICE_NAME=SVU2)    )  )
#url.data-source-dashboard=jdbc:oracle:thin:@//dm13-scan.sogei.it:1521/DM13E_AEOI
#url.data-source-dashboard=jdbc:oracle:thin:@//dmv3-scan.sogei.it:1521/DMV3L_AEOI
#url.data-source-dashboard=jdbc:oracle:thin:@//dm15-scan.sogei.it:1521/DM15A_AEOI
#url.data-source-dashboard=jdbc:oracle:thin:@//db12svil6.srv.sogei.it:1521/DB12U6
#url.data-source-dashboard-cbc=jdbc:oracle:thin:@26.2.63.71:1521:SVU2
#url.data-source-dashboard-cbc=jdbc:oracle:thin:@//dmv3-scan.sogei.it:1521/DMV3L_AEOI
#url.data-source-dashboard-cbc=jdbc:oracle:thin:@//dm13-scan.sogei.it:1521/DM13E_AEOI

#url.data-source-dashboard=jdbc:oracle:thin:@//localhost:1521/ORCLCDB.localdomain
#url.data-source-dashboard=jdbc:oracle:thin:@(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=10.50.5.48)(PORT=1630))(ADDRESS=(PROTOCOL=TCP)(HOST=ischia)(PORT=1630))(ADDRESS=(PROTOCOL=TCP)(HOST=db12svil6.srv.sogei.it)(PORT=1521)))(SOURCE_ROUTE=yes)(CONNECT_DATA=(SERVICE_NAME=DB12U6)))
spring.banner.location=banner.txt
#server.servlet.context-path=/dac7
############### DATASOURCE EXCHANGE COMMAND ##############
# spring.datasource.exchange-command.url=${url.data-source-dashboard-cbc}
# spring.datasource.exchange-command.username=DBOARD_CBC_EXC_C
# spring.datasource.exchange-command.password=DBOARD_CBC_EXC_C
# spring.datasource.exchange-command.driver-class-name=oracle.jdbc.OracleDriver
############### DATASOURCE EXCHANGE COMMAND ##############
#
############### DATASOURCE EXCHANGE VIEW ##############
# spring.datasource.exchange-view.url=${url.data-source-dashboard-cbc}
# spring.datasource.exchange-view.username=DBOARD_CBC_EXC_V
# spring.datasource.exchange-view.password=DBOARD_CBC_EXC_V
# spring.datasource.exchange-view.driver-class-name=oracle.jdbc.OracleDriver
############### DATASOURCE EXCHANGE VIEW ##############

#server.port=9999
#server.servlet.context-path: /dac7
############## DATASOURCE QUADRO SINOTTICO ##############
# spring.datasource.quadro-sinottico.url=${url.data-source-dashboard-cbc}
# spring.datasource.quadro-sinottico.username=DBOARD_QUADRO_SINOTTICO
# spring.datasource.quadro-sinottico.password=DBOARD_QUADRO_SINOTTICO
# spring.datasource.quadro-sinottico.driver-class-name=oracle.jdbc.OracleDriver
############## DATASOURCE QUADRO SINOTTICO ##############

############## DATASOURCE NATIONAL ##############
spring.datasource.national.url=jdbc:oracle:thin:@(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=10.50.5.48)(PORT=1630))(ADDRESS=(PROTOCOL=TCP)(HOST=26.2.63.54)(PORT=1630))(ADDRESS=(PROTOCOL=TCP)(HOST=26.0.137.67)(PORT=1521)))(SOURCE_ROUTE=yes)(CONNECT_DATA=(SERVICE_NAME=DB12U6)))
spring.datasource.national.username=DBOARD_DPI_NATIONAL
spring.datasource.national.password=DBOARD_DPI_NATIONAL
spring.datasource.national.driver-class-name=oracle.jdbc.OracleDriver
############## DATASOURCE NATIONAL ##############

############## DATASOURCE NON RESIDENTI ##############
spring.datasource.non-residenti.url=jdbc:oracle:thin:@(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=10.50.5.48)(PORT=1630))(ADDRESS=(PROTOCOL=TCP)(HOST=26.2.63.54)(PORT=1630))(ADDRESS=(PROTOCOL=TCP)(HOST=26.0.137.67)(PORT=1521)))(SOURCE_ROUTE=yes)(CONNECT_DATA=(SERVICE_NAME=DB12U6)))
spring.datasource.non-residenti.username=DBOARD_DPI_NR
spring.datasource.non-residenti.password=DBOARD_DPI_NR
spring.datasource.non-residenti.driver-class-name=oracle.jdbc.OracleDriver
############## DATASOURCE NON RESIDENTI ##############

############## DATASOURCE RESIDENTI ##############
spring.datasource.residenti.url=jdbc:oracle:thin:@(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=10.50.5.48)(PORT=1630))(ADDRESS=(PROTOCOL=TCP)(HOST=26.2.63.54)(PORT=1630))(ADDRESS=(PROTOCOL=TCP)(HOST=26.0.137.67)(PORT=1521)))(SOURCE_ROUTE=yes)(CONNECT_DATA=(SERVICE_NAME=DB12U6)))
spring.datasource.residenti.username=DBOARD_DPI_R
spring.datasource.residenti.password=DBOARD_DPI_R
spring.datasource.residenti.driver-class-name=oracle.jdbc.OracleDriver
############## DATASOURCE RESIDENTI ##############

############## URL COUNTRY SERVICE ##############
url-country-service=http://localhost:8080
url-boundary-service=http://localhost:8080
url-dpi-nr-command-service=http://localhost:8080
url-dpi-com-view-service=http://localhost:8080
url-dpi-com-command-service=http://localhost:8080
url-exchange-view-service=http://localhost:8080
#urlCountryService=http://localhost:20003/country/crs
urlCountryServiceFindByIsoCode=http://localhost:8080
#urlCountryServiceFindByIsoCode=http://localhost:20003/country/crs/find-by-iso-code/{isoCode}
#urlCountryServiceFindByIsoCode=https://dashboard-aeoi.agenziaentrate.it/dboard-cbc-countries.dashboard-aeoi-produzione.svc/country/crs/find-by-iso-code/{isoCode}
#urlCountryService=https://dashboard-aeoi.agenziaentrate.it/dboard-cbc-countries.dashboard-aeoi-produzione.svc/country/crs/find-partecipating-countries
############## URL COUNTRY SERVICE ##############

############## URL UNPACKAGING SERVICE ##############
urlUnpackagingService=http://localhost:8080
#urlUnpackagingService=http://localhost:9080/AEOI_common_certificates_WEB/rest/cts/unpack
############## URL UNPACKAGING SERVICE ##############

############## HIBERNATE CONFIGURATION ##############
hibernate.hbm2ddl.auto=none
hibernate.cache.use_second_level_cache=false
hibernate.cache.use_query_cache=false
hibernate.dialect=org.hibernate.dialect.Oracle10gDialect
hibernate.id.new_generator_mappings=true
hibernate.jdbc.fetch_size=100
hibernate.jdbc.batch_size=100
hibernate.show_sql=false
hibernate.generate_statistics=false
hibernate.enable_lazy_load_no_trans=true
############## HIBERNATE CONFIGURATION ##############
spring.jpa.properties.hibernate.jdbc.batch_size=100
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.generate_statistics=false

spring.jpa.hibernate.ddl-auto=none
spring.jpa.properties.hibernate.show_sql=true
spring.jpa.properties.hibernate.use_sql_comments=true
spring.jpa.properties.hibernate.format_sql=true
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=info
spring.main.allow-bean-definition-overriding=true

#######PHYSICAL NAMING ENTITY #####################
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
#######PHYSICAL NAMING ENTITY #####################

#######APPLICATION MONITORING################
#Actuator Configuration (default is /actuator)
info.app.name=Dboard Dac7 Service Application
info.app.version=1.0.0
#######APPLICATION MONITORING################
###### METRICS ##################
management.endpoints.web.exposure.include=health,info,metrics,prometheus
management.endpoint.metrics.enabled=true
management.endpoint.prometheus.enabled=true
management.metrics.export.prometheus.enabled=true
###### METRICS ##################

spring.sleuth.messaging.kafka.enabled=false

#Container id 
kafka.container.id=dac7-be-${MY_ADDRESS}

#######KAFKA PRODUCER SETTING################
# ID to pass to the server when making requests. Used for server-side logging.
spring.kafka.client-id=Dac7-be-client
# Nummber of retry to contact Kafka
spring.kafka.producer.retries=5
# Comma-delimited list of host:port pairs to use for establishing the initial connections to the Kafka cluster. Overrides the global property, for producers.
spring.kafka.producer.bootstrap-servers=${SERVERS_KAFKA}
# Serializer for key and value
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
producer.producer-name=DAC7-BE-PRODUCER
spring.kafka.producer.acks=all
#######KAFKA CONSUMER SETTING################
# Unique string that identifies the consumer group to which this consumer belongs.
#spring.kafka.consumer.group-id=Dac7-be-consumer
# Comma-delimited list of host:port pairs to use for establishing the initial connections to the Kafka cluster. Overrides the global property, for consumers.
spring.kafka.consumer.bootstrap-servers=${SERVERS_KAFKA}
# What to do when there is no initial offset in Kafka or if the current offset no longer exists on the server.
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.listener.ack-mode=MANUAL_IMMEDIATE
spring.kafka.producer.properties.max.request.size=5242880
spring.kafka.properties.enable.idempotence=true
spring.kafka.properties.transactional.id=${MY_ADDRESS}
spring.kafka.consumer.enable-auto-commit= false
#######KAFKA CONSUMER SETTING################
spring.kafka.consumer.isolation-level=read_committed
#spring.kafka.consumer.properties.max.poll.interval.ms=2000000
#spring.kafka.consumer.max-poll-records=1

########TOPICS################
topic.dpiNatErr=${TOPIC_DPI_NATIONAL_ERR}
topic.dpiNatCommand=${TOPIC_DPI_NATIONAL_COMMAND}
topic.dpiNatEvent=${TOPIC_DPI_NATIONAL_EVENT}
topic.dpiNrErr=${TOPIC_DPI_NR_ERR}
topic.dpiNrCommand=${TOPIC_DPI_NR_COMMAND}
topic.dpiNrEvent=${TOPIC_DPI_NR_EVENT}
topic.dpiResErr=${TOPIC_DPI_RES_ERR}
topic.dpiResCommand=${TOPIC_DPI_RES_COMMAND}
topic.dpiResEvent=${TOPIC_DPI_RES_EVENT}
topic.boundaryService=${TOPIC_BOUNDARY_SERVICE_EVENT}
#topic.dueDateService=${DPI_DUE_DATE_SERVICE_EVENT}
topic.exchangeResEvent=${TOPIC_EXCHANGE_COMMAND_RES_EVENT}
topic.exchangeNrEvent=${TOPIC_EXCHANGE_COMMAND_NR_EVENT}
########TOPICS################

####### COMMON EVENTS #####################
event.updateStatus=${EVENT_UPDATE_STATUS}
event.deleteMessage=${EVENT_DELETE_MESSAGE}
event.mwMsgSent=${EVENT_MW_MSG_SENT}
event.ctsUnpackagingError=${EVENT_CTS_UNPACKAGING_ERROR}
event.updateNotes=${EVENT_UPDATE_NOTES}
event.accededCountry=${ACCEDED_COUNTRY}
event.restoredCountry=${RESTORED_COUNTRY}
event.blockedCountry=${BLOCKED_COUNTRY}
####### NAT EVENTS #####################
event.processHistory=${EVENT_PROCESS_HISTORY}
event.deleteCommunication=${EVENT_DELETE_COMMUNICATION}
event.expiredFiscalYear=${EXPIRED_FISCAL_YEAR}
event.updateFiscalYear=${UPDATE_FISCAL_YEAR}
event.updateEffectiveDest=${EVENT_UPDATE_EFFECTIVE_DEST}
event.finalizeCommunication=${EVENT_FINALIZE_COMMUNICATION}
event.addEffectiveDest=${EVENT_ADD_EFFECTIVE_DEST}
event.removeEffectiveDest=${EVENT_REMOVE_EFFECTIVE_DEST}
event.lateCommunication=${EVENT_LATE_COMMUNICATION}
event.finishedExpiredCommunication=${FINISHED_EXPIRED_COMMUNICATIONS}

####### NR EVENTS #####################
event.startBuildingMessagesExpiredFy=${EVENT_START_BUILDING_MESSAGES_EXPIRED_FY}
event.startBuildingMessagesSpecificCom=${EVENT_START_BUILDING_MESSAGES_SPECIFIC_COM}
event.startBuildingMessagesSpecificCountry=${EVENT_START_BUILDING_MESSAGES_SPECIFIC_COUNTRY}
event.buildMessage=${EVENT_BUILD_MESSAGE}
event.currentCountry=${EVENT_CURRENT_COUNTRY}
event.continueBuildingMessage=${EVENT_CONTINUE_BUILDING_MESSAGE}
event.nextCommunication=${EVENT_NEXT_COMMUNICATION}
event.startNewMessage=${EVENT_START_NEW_MESSAGE}
event.dataBuildingYear=${EVENT_DATA_BUILDING_YEAR}
event.retransmitMessage=${EVENT_RETRANSMIT_MESSAGE}
event.rebuildMessage=${EVENT_REBUILD_MESSAGE}
event.messageValidation=${EVENT_MESSAGE_VALIDATION}
event.notifyReminderMessagesReadyToSend=${EVENT_NOTIFY_REMINDER_MESSAGES_READY_TO_SEND}
event.notifyReminderStatusMessage=${EVENT_NOTIFY_REMINDER_STATUS_MESSAGE}
event.closeExchangeForCountry=${EVENT_CLOSE_EXCHANGE_FOR_COUNTRY}
event.changeStatusPrenotatoInvio=${EVENT_CHANGE_STATUS_PRENOTATO_INVIO}
event.incomingStatusMessageError=${EVENT_INCOMING_STATUS_MESSAGE_ERROR}
event.incomingStatusMessage=${EVENT_INCOMING_STATUS_MESSAGE}
event.alertMessage=${EVENT_ALERT_MESSAGE}
event.resendMessage=${EVENT_RESEND_MESSAGE}
event.reworkStatusMessage=${EVENT_REWORK_STATUS_MESSAGE}
event.reminderEmail=${EVENT_REMINDER_EMAIL}
event.insertErrorReport=${EVENT_INSERT_ERROR_REPORT}
event.notifyReminderNotConcludedNr=${EVENT_NOTIFY_REMINDER_NOT_CONCLUDED_NR}
####### RES EVENTS #####################
event.reworkMessage=${EVENT_REWORK_MESSAGE}
event.updateErrorReport=${EVENT_UPDATE_ERROR_REPORT}
event.incomingMessage=${EVENT_INCOMING_MESSAGE}
event.incomingMessageBusinessXmlNotValidAndSendStatusMessage=${EVENT_INCOMING_MESSAGE_BUSINESS_XML_NOT_VALID_AND_SEND_STATUS_MESSAGE}
event.incomingMessageBusinessWithStatusMessageSuspended=${EVENT_INCOMING_MESSAGE_BUSINESS_WITH_STATUS_MESSAGE_SUSPENDED}
event.incomingMessageBusinessAndSendStatusMessage=${EVENT_INCOMING_MESSAGE_BUSINESS_AND_SEND_STATUS_MESSAGE}
#event.insertCorrectable=${EVENT_INSERT_CORRECTABLE}
event.sendResendStatusMessage=${EVENT_SEND_RESEND_STATUS_MESSAGE}
event.alertStatusMessage=${EVENT_ALERT_STATUS_MESSAGE}
event.incomingMessageBusinessFailedDecryption=${EVENT_INCOMING_MESSAGE_BUSINESS_FAILED_DECRYPTION}
event.notifyReminderNotConcludedRes=${EVENT_NOTIFY_REMINDER_NOT_CONCLUDED_RES}
###############################


########KAFKA SECURITY################
spring.kafka.properties.security.protocol=SASL_SSL
spring.kafka.properties.sasl.mechanism=SCRAM-SHA-256
spring.kafka.properties.ssl.truststore.location=/config/resources/security/truststore.jks
spring.kafka.properties.ssl.truststore.password=${PSW_TRUSTSTORE}
spring.kafka.properties.sasl.jaas.config=org.apache.kafka.common.security.scram.ScramLoginModule required username="${KAFKA_USER-ENT-SA-0439_FU_001}" password="${KAFKA_PASSWORD-ENT-SA-0439_FU_001}";
########KAFKA SECURITY################


#validation.resources-dir-path=/opt/CBC-DAC4-RESOURCES-FOLDER/cbc2.0
validation.evm-dir-path=DAC7-RESOURCES-FOLDER/dac7

